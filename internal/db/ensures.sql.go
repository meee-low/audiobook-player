// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ensures.sql

package db

import (
	"context"
	"database/sql"
)

const ensureAssociateAuthorToBook = `-- name: EnsureAssociateAuthorToBook :exec
INSERT INTO authors_books (author_id, book_id)
VALUES ( ?, ? )
ON CONFLICT(author_id, book_id) DO NOTHING
`

type EnsureAssociateAuthorToBookParams struct {
	AuthorID int64
	BookID   int64
}

func (q *Queries) EnsureAssociateAuthorToBook(ctx context.Context, arg EnsureAssociateAuthorToBookParams) error {
	_, err := q.db.ExecContext(ctx, ensureAssociateAuthorToBook, arg.AuthorID, arg.BookID)
	return err
}

const ensureAssociateFileToBook = `-- name: EnsureAssociateFileToBook :exec
INSERT INTO books_files (concrete_book_id, file_id, sequence_number)
VALUES ( ?, ?, ?)
ON CONFLICT(concrete_book_id, file_id) DO NOTHING
`

type EnsureAssociateFileToBookParams struct {
	ConcreteBookID int64
	FileID         int64
	SequenceNumber sql.NullInt64
}

func (q *Queries) EnsureAssociateFileToBook(ctx context.Context, arg EnsureAssociateFileToBookParams) error {
	_, err := q.db.ExecContext(ctx, ensureAssociateFileToBook, arg.ConcreteBookID, arg.FileID, arg.SequenceNumber)
	return err
}

const ensureBook = `-- name: EnsureBook :exec
INSERT INTO books (title, release_year)
VALUES (?, ?)
ON CONFLICT(title) DO NOTHING
`

type EnsureBookParams struct {
	Title       string
	ReleaseYear sql.NullInt64
}

func (q *Queries) EnsureBook(ctx context.Context, arg EnsureBookParams) error {
	_, err := q.db.ExecContext(ctx, ensureBook, arg.Title, arg.ReleaseYear)
	return err
}

const ensureConcreteBook = `-- name: EnsureConcreteBook :exec
INSERT INTO concrete_books (book_id, year_audiobook, parent_path_id)
VALUES (?, ?, ?)
ON CONFLICT(book_id, parent_path_id) DO NOTHING
`

type EnsureConcreteBookParams struct {
	BookID        int64
	YearAudiobook sql.NullInt64
	ParentPathID  int64
}

func (q *Queries) EnsureConcreteBook(ctx context.Context, arg EnsureConcreteBookParams) error {
	_, err := q.db.ExecContext(ctx, ensureConcreteBook, arg.BookID, arg.YearAudiobook, arg.ParentPathID)
	return err
}

const ensureFileInfo = `-- name: EnsureFileInfo :exec
INSERT INTO files (
  name, extension, seconds, parent_path_id, checksum, filesize
)
VALUES (?, ?, ?, ?, ?, ?)
ON CONFLICT(parent_path_id, name, extension) DO NOTHING
`

type EnsureFileInfoParams struct {
	Name         string
	Extension    string
	Seconds      int64
	ParentPathID int64
	Checksum     sql.NullString
	Filesize     sql.NullInt64
}

func (q *Queries) EnsureFileInfo(ctx context.Context, arg EnsureFileInfoParams) error {
	_, err := q.db.ExecContext(ctx, ensureFileInfo,
		arg.Name,
		arg.Extension,
		arg.Seconds,
		arg.ParentPathID,
		arg.Checksum,
		arg.Filesize,
	)
	return err
}

const ensurePath = `-- name: EnsurePath :exec
INSERT INTO paths (path)
VALUES (?)
ON CONFLICT(path) DO NOTHING
`

func (q *Queries) EnsurePath(ctx context.Context, path string) error {
	_, err := q.db.ExecContext(ctx, ensurePath, path)
	return err
}

const ensurePerson = `-- name: EnsurePerson :exec
INSERT INTO persons (name)
VALUES (?)
ON CONFLICT(name) DO NOTHING
`

func (q *Queries) EnsurePerson(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, ensurePerson, name)
	return err
}
