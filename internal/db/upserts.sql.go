// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: upserts.sql

package db

import (
	"context"
	"database/sql"
)

const upsertBook = `-- name: UpsertBook :one
INSERT INTO books (
  title, release_year
) VALUES (
  ?, ?
) RETURNING id, title, release_year
`

type UpsertBookParams struct {
	Title       string
	ReleaseYear sql.NullInt64
}

func (q *Queries) UpsertBook(ctx context.Context, arg UpsertBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, upsertBook, arg.Title, arg.ReleaseYear)
	var i Book
	err := row.Scan(&i.ID, &i.Title, &i.ReleaseYear)
	return i, err
}

const upsertConcreteBook = `-- name: UpsertConcreteBook :one
INSERT INTO concrete_books (
  book_id, year_audiobook
) VALUES (
  ?, ?
) RETURNING id, book_id, year_audiobook
`

type UpsertConcreteBookParams struct {
	BookID        int64
	YearAudiobook sql.NullInt64
}

func (q *Queries) UpsertConcreteBook(ctx context.Context, arg UpsertConcreteBookParams) (ConcreteBook, error) {
	row := q.db.QueryRowContext(ctx, upsertConcreteBook, arg.BookID, arg.YearAudiobook)
	var i ConcreteBook
	err := row.Scan(&i.ID, &i.BookID, &i.YearAudiobook)
	return i, err
}

const upsertFileInfo = `-- name: UpsertFileInfo :one
INSERT INTO files (
  name, extension, seconds, parent_path_id, checksum, filesize
) VALUES (
  ?, ?, ?, ?, ?, ?
) RETURNING id, name, extension, seconds, parent_path_id, checksum, filesize
`

type UpsertFileInfoParams struct {
	Name         string
	Extension    string
	Seconds      int64
	ParentPathID int64
	Checksum     sql.NullString
	Filesize     sql.NullInt64
}

func (q *Queries) UpsertFileInfo(ctx context.Context, arg UpsertFileInfoParams) (File, error) {
	row := q.db.QueryRowContext(ctx, upsertFileInfo,
		arg.Name,
		arg.Extension,
		arg.Seconds,
		arg.ParentPathID,
		arg.Checksum,
		arg.Filesize,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Extension,
		&i.Seconds,
		&i.ParentPathID,
		&i.Checksum,
		&i.Filesize,
	)
	return i, err
}

const upsertParentPath = `-- name: UpsertParentPath :one
INSERT INTO files ( parent_path_id )
VALUES ( ? )
RETURNING id, name, extension, seconds, parent_path_id, checksum, filesize
`

func (q *Queries) UpsertParentPath(ctx context.Context, parentPathID int64) (File, error) {
	row := q.db.QueryRowContext(ctx, upsertParentPath, parentPathID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Extension,
		&i.Seconds,
		&i.ParentPathID,
		&i.Checksum,
		&i.Filesize,
	)
	return i, err
}

const upsertPerson = `-- name: UpsertPerson :one
INSERT INTO persons (
  name
) VALUES (
  ?
) RETURNING id, name
`

func (q *Queries) UpsertPerson(ctx context.Context, name string) (Person, error) {
	row := q.db.QueryRowContext(ctx, upsertPerson, name)
	var i Person
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
