// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
)

const createPerson = `-- name: CreatePerson :one
INSERT INTO persons (
  name
) VALUES (
  ?
)
RETURNING id, name
`

func (q *Queries) CreatePerson(ctx context.Context, name string) (Person, error) {
	row := q.db.QueryRowContext(ctx, createPerson, name)
	var i Person
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deletePerson = `-- name: DeletePerson :exec
DELETE FROM persons
WHERE id = ?
`

func (q *Queries) DeletePerson(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePerson, id)
	return err
}

const getPerson = `-- name: GetPerson :one
SELECT id, name FROM persons
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPerson(ctx context.Context, id int64) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPerson, id)
	var i Person
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listPersons = `-- name: ListPersons :many
SELECT id, name FROM persons
ORDER BY name
`

func (q *Queries) ListPersons(ctx context.Context) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, listPersons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePerson = `-- name: UpdatePerson :exec
UPDATE persons
set name = ?
WHERE id = ?
RETURNING id, name
`

type UpdatePersonParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) error {
	_, err := q.db.ExecContext(ctx, updatePerson, arg.Name, arg.ID)
	return err
}
